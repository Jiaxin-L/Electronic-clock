C51 COMPILER V9.55   MAIN                                                                  03/01/2017 19:05:47 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG51.H>  
   2          unsigned char code LEDDATA[]={0xc0,0xf9,0xa4,0xb0,0x99,0x92,
   3          0x82,0xf8,0x80,0x90,0xff,0x8e,0x86};
   4          //数码管显示的代码表，后三个为灭灯、"F"、"E"
   5          unsigned char code LEDBITDATA[]={0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f,}; 
   6          //数码管扫描代码表
   7          unsigned char LEDBuffer[6];     //定义显示缓冲区数组
   8          unsigned char Hour;         //时单元
   9          unsigned char Minute;         //分单元
  10          unsigned char Second;       //秒单元
  11          unsigned char Hourrom;        //定时时单元
  12          unsigned char Minuterom;      //定时分单元
  13          unsigned char Minutesw;           //秒表分单元
  14          unsigned char Secondsw;           //秒表秒单元
  15          unsigned char Centsw;             //秒表百分之一秒单元
  16          unsigned char Beepflag;       //定时响铃标志
  17          unsigned char SETFlag=0;      //模式标志
  18          unsigned char second_tick;      //闪动标志
  19          unsigned char Time;         //超时计数
  20          unsigned char ALMFlag=0;      //定时开启标志
  21          
  22          sbit ALM_KEY=P3^2;          //显示定时时间按键
  23          sbit SET_KEY=P3^3;          //闹钟模式键
  24          sbit UP_KEY=P3^4;         //加计数键
  25          sbit DOWN_KEY=P3^5;         //减计数键
  26          sbit Beep=P1^7;           //蜂鸣器接口引脚
  27          
  28          void init()
  29          {   TMOD=0x01;            //T0初始化方式1,定时
  30   1        TH0=(65536-2000)/256;     //TH0,TL0装入定时2mS的初值
  31   1        TL0=(65536-2000)%256;
  32   1        TR0=1;              //启动T0工作
  33   1        ET0=1;              //允许T0溢出中断
  34   1        
  35   1        TH1=(65536-50000)/256;        
  36   1        TL1=(65536-50000)%256; 
  37   1        TR1=0;
  38   1        ET1=1;
  39   1        EA=1;             //CPU开中断
  40   1      }
  41          
  42          void Delay(unsigned int t)      //延时子程序
  43          { while(t)t--;
  44   1      }
  45          void key()              //键盘操作子程序
  46          { unsigned char i;        //缓冲数组位数标志
  47   1        char Num;           //临时数字，存储数组合并值
  48   1        if(SET_KEY==0)          //判断模式键是否按下
  49   1        { Delay(500);         //去按键抖动
  50   2          if(SET_KEY==0)        //再判断是否真得按下了
  51   2          {   SETFlag++;        //状态改变
  52   3            if(SETFlag==8) SETFlag=0; //返回正常模式
  53   3            if(SETFlag==1) i=4;     //调节读取显示数组的位数
  54   3            if(SETFlag==2) i=2;
C51 COMPILER V9.55   MAIN                                                                  03/01/2017 19:05:47 PAGE 2   

  55   3            if(SETFlag==3) i=0;
  56   3            if(SETFlag==4) i=4;
  57   3            if(SETFlag==5) i=2;
  58   3            if(SETFlag==6) i=0;
  59   3            if(SETFlag==7) ;
  60   3          }
  61   2        while(SET_KEY==0);          //等按键释放
  62   2        }
  63   1      
  64   1        if((UP_KEY==0)&&(SETFlag!=0))   //判断加计数键是否按下
  65   1        {
  66   2          Delay(5000);          //去按键抖动
  67   2          if(UP_KEY==0)         //再判断是否真得按下了
  68   2          { Num=(LEDBuffer[i+1]+LEDBuffer[i]*10);
  69   3            Num++;            //时单元的数值加1
  70   3            if((Num==24)&&((SETFlag==3)||(SETFlag==5))) Num=0;  //加到24归0
  71   3            if((Num==60)&&((SETFlag==1)||(SETFlag==2)||(SETFlag==4))) Num=0;      //加到60归0
  72   3            switch(SETFlag)       //把修改值写回
  73   3            { case 0: ;break;
  74   4              case 1: Second=Num;break;
  75   4              case 2: Minute=Num;break;
  76   4              case 3: Hour=Num;break;
  77   4              case 4: Minuterom=Num;break;      
  78   4              case 5: Hourrom=Num;break;
  79   4              case 6: ALMFlag=!ALMFlag;break;
  80   4              case 7: TR1=!TR1;break;           //秒表开始与暂停
  81   4            }
  82   3          }
  83   2         }
  84   1      
  85   1        if((DOWN_KEY==0)&&(SETFlag!=0)) //判断减计数键是否按下
  86   1        {
  87   2          Delay(5000);        //去按键抖动
  88   2          if(DOWN_KEY==0)       //再判断是否真得按下了
  89   2          { Num=(LEDBuffer[i+1]+LEDBuffer[i]*10);
  90   3            Num--;          //时单元的数值减1
  91   3            if((Num<0)&&((SETFlag==3)||(SETFlag==5))) Num=23; //到24归0
  92   3            if((Num<0)&&((SETFlag==1)||(SETFlag==2)||(SETFlag==4))) Num=59;     //到60归0
  93   3            switch(SETFlag)       //把修改值写回
  94   3            { case 0: ;break;
  95   4              case 1: Second=Num;break;
  96   4              case 2: Minute=Num;break;
  97   4              case 3: Hour=Num;break; 
  98   4              case 4: Minuterom=Num;break;
  99   4              case 5: Hourrom=Num;break;        
 100   4              case 6: ALMFlag=!ALMFlag;break;
 101   4              case 7: TR1=0;Minutesw=0;Secondsw=0;Centsw=0;break;   //秒表reset     
 102   4            }
 103   3          }
 104   2        }
 105   1        if(ALM_KEY==0)
 106   1        { SETFlag=0;            //状态返回
 107   2          if(ALMFlag==0)LEDBuffer[0]=11;  //根据闹铃状态显示F或者E
 108   2          else LEDBuffer[0]=12;     //将时,分,秒单元内容送入暂存区
 109   2          LEDBuffer[1]=10;        //关闭该数码管显示
 110   2          LEDBuffer[2]=Hourrom/10;
 111   2          LEDBuffer[3]=Hourrom%10;
 112   2          LEDBuffer[4]=Minuterom/10;
 113   2          LEDBuffer[5]=Minuterom%10;
 114   2          
 115   2          if(ALMFlag==1)
 116   2          { Beep=1;
C51 COMPILER V9.55   MAIN                                                                  03/01/2017 19:05:47 PAGE 3   

 117   3            Beepflag=0;
 118   3          }
 119   2        }
 120   1      }      
 121          
 122          
 123          void display()              //显示暂存区内容对应的代码显示
 124          {   unsigned char LEDScanCount,i;   //位选扫描计数器
 125   1      P0=0xff;                //适应仿真需要
 126   1      if((UP_KEY==0)||(DOWN_KEY==0)) i=0x00;  //加减键有操作放弃闪烁
 127   1        else i = 0xff*second_tick;      //设定闪烁变量
 128   1      P2= LEDBITDATA[LEDScanCount];     //送出位选数据
 129   1      switch(SETFlag)
 130   1        { case 0: P0=LEDDATA[LEDBuffer[LEDScanCount]];break;  //送出段选数据 
 131   2          case 1: if(LEDScanCount>=4)             //判断出最高两位
 132   2                 P0=i|LEDDATA[LEDBuffer[LEDScanCount]]; //使小时闪烁
 133   2              else P0=LEDDATA[LEDBuffer[LEDScanCount]];break; //低位正常显示
 134   2          case 2: if((LEDScanCount==2)||(LEDScanCount==3))    //判断出中间位
 135   2                 P0=i|LEDDATA[LEDBuffer[LEDScanCount]]; //使分钟闪烁
 136   2              else P0=LEDDATA[LEDBuffer[LEDScanCount]];break; //其他位正常显示
 137   2          case 3: if(LEDScanCount<=1)
 138   2                 P0=i|LEDDATA[LEDBuffer[LEDScanCount]];
 139   2              else P0=LEDDATA[LEDBuffer[LEDScanCount]];break;
 140   2          case 4: if(LEDScanCount>=4)
 141   2                 P0=i|LEDDATA[LEDBuffer[LEDScanCount]];
 142   2              else P0=LEDDATA[LEDBuffer[LEDScanCount]];break;
 143   2          case 5: if((LEDScanCount==2)||(LEDScanCount==3))
 144   2                 P0=i|LEDDATA[LEDBuffer[LEDScanCount]];
 145   2              else P0=LEDDATA[LEDBuffer[LEDScanCount]];break;
 146   2          case 6: if(LEDScanCount<=1)
 147   2                 P0=i|LEDDATA[LEDBuffer[LEDScanCount]];
 148   2              else P0=LEDDATA[LEDBuffer[LEDScanCount]];break;
 149   2          case 7: P0=LEDDATA[LEDBuffer[LEDScanCount]];break; 
 150   2        }
 151   1      LEDScanCount++;             //扫描指针加计数
 152   1      if(LEDScanCount==6) LEDScanCount=0 ;  //扫描完从头开始;
 153   1      }
 154          
 155          
 156          void time0() interrupt 1
 157          {   unsigned int SecondCount;
 158   1        unsigned int timercp;       //秒计数器
 159   1        TH0=(65536-2000)/256;       //TH0,TL0装入定时2mS的初值
 160   1        TL0=(65536-2000)%256;  
 161   1        display();              //调用显示函数
 162   1        timercp++;    
 163   1        if((SETFlag!=0)&&(SETFlag!=7))            //10秒不操作自动返回
 164   1          { if((SET_KEY==0)||(UP_KEY==0)||(DOWN_KEY==0)) Time=0;  //任意键有操作放弃计时
 165   2            if (Time>=10){SETFlag=0;Time=0;}
 166   2          }
 167   1        if (timercp == 250)       
 168   1          { timercp= 0; 
 169   2            second_tick = !second_tick;   //设定0.5秒闪动一次 
 170   2            SecondCount++;
 171   2            if(SecondCount==2)        //1秒的时间
 172   2            { SecondCount=0;        //计数器清零
 173   3              Time++;         
 174   3              Second++;         //时间的秒加1
 175   3              if(Second==60)
 176   3              { Second=0;       //秒清零
 177   4                Minute++;       //分进一
 178   4                if(Minute==60)
C51 COMPILER V9.55   MAIN                                                                  03/01/2017 19:05:47 PAGE 4   

 179   4                { Minute=0;
 180   5                  Hour++;
 181   5                  if(Hour==24)Hour=0; //小时清零
 182   5                }
 183   4              }
 184   3            }
 185   2        if(SETFlag<=3)              //状态模式小于3是加载时钟时间
 186   2            { LEDBuffer[0]=Hour/10;
 187   3              LEDBuffer[1]=Hour%10;
 188   3              LEDBuffer[2]=Minute/10;
 189   3              LEDBuffer[3]=Minute%10;
 190   3              LEDBuffer[4]=Second/10;
 191   3              LEDBuffer[5]=Second%10; 
 192   3            
 193   3            }
 194   2            else               //调整闹钟时间时加载闹钟时间
 195   2            { if(ALMFlag==0)LEDBuffer[0]=11; //显示闹钟激活状态
 196   3              else LEDBuffer[0]=12;
 197   3              LEDBuffer[1]=10;       //关闭倒数第二位
 198   3              LEDBuffer[2]=Hourrom/10;
 199   3              LEDBuffer[3]=Hourrom%10;
 200   3              LEDBuffer[4]=Minuterom/10;
 201   3              LEDBuffer[5]=Minuterom%10;    
 202   3            }
 203   2            if(SETFlag==7)
 204   2            {
 205   3              LEDBuffer[0]=Minutesw/10;
 206   3              LEDBuffer[1]=Minutesw%10;
 207   3              LEDBuffer[2]=Secondsw/10;
 208   3              LEDBuffer[3]=Secondsw%10;
 209   3              LEDBuffer[4]=Centsw/10;
 210   3              LEDBuffer[5]=Centsw%10;
 211   3            }
 212   2        }
 213   1        
 214   1      }
 215          void time1() interrupt 3      //秒表中断程序
 216          {
 217   1        unsigned int Count;
 218   1        TH1=(65536-50000)/256;        
 219   1        TL1=(65536-50000)%256; 
 220   1        display();  
 221   1        Count++;
 222   1        if(Count==2)
 223   1        {
 224   2        Count=0;
 225   2        Centsw++;
 226   2        if(Centsw==100)
 227   2        {
 228   3          Centsw=0;
 229   3          Secondsw++;
 230   3          if(Secondsw==60)
 231   3          {
 232   4            Secondsw=0;
 233   4            Minutesw++;
 234   4            if(Minutesw==60)
 235   4            {
 236   5              Minutesw=0;
 237   5            }
 238   4          }
 239   3        }
 240   2        
C51 COMPILER V9.55   MAIN                                                                  03/01/2017 19:05:47 PAGE 5   

 241   2      
 242   2        }
 243   1        LEDBuffer[0]=Minutesw/10;
 244   1        LEDBuffer[1]=Minutesw%10;
 245   1        LEDBuffer[2]=Secondsw/10;
 246   1        LEDBuffer[3]=Secondsw%10;
 247   1        LEDBuffer[4]=Centsw/10;
 248   1        LEDBuffer[5]=Centsw%10;
 249   1        
 250   1      }
 251            
 252          
 253          
 254          
 255          void main()
 256          { init();               //初始化
 257   1        while(1)
 258   1      {   key();              //调用键盘
 259   2          if(ALMFlag==1)
 260   2          { if(Minute!=Minuterom) Beepflag=1; //定时和现在不同，关闭蜂鸣器
 261   3            if((Hour==Hourrom)&&(Minute==Minuterom)&&(Beepflag==1)) Beep=0;
 262   3                //时分相同并闹铃打开就响铃
 263   3          }
 264   2      } 
 265   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1194    ----
   CONSTANT SIZE    =     21    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
